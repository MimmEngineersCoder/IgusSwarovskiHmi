<UserControl x:Class="IgusSwarovskiHmi.Views.MainView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:helpers="clr-namespace:IgusSwarovskiHmi.Helpers"
             xmlns:local="clr-namespace:IgusSwarovskiHmi.Views" 
             xmlns:enums ="clr-namespace:IgusSwarovskiHmi.Enums"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:viewmodels="clr-namespace:IgusSwarovskiHmi.ViewModels" 
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks" 
             xmlns:svgc="http://sharpvectors.codeplex.com/svgc/" d:DataContext="{d:DesignInstance Type=viewmodels:MainViewModel}"
             mc:Ignorable="d" 
             d:DesignHeight="1080" d:DesignWidth="1920">

    <UserControl.Resources>
        <Style TargetType="Button" BasedOn="{StaticResource ButtonNoHover}"/>
    </UserControl.Resources>
    
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition MaxHeight="250"/>
        </Grid.RowDefinitions>

        

        <DockPanel LastChildFill="True">
            <DockPanel DockPanel.Dock="Left" LastChildFill="False" Width="185">
                <DockPanel.Resources>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource MahApps.Styles.TextBlock}">
                        <Setter Property="FontSize" Value="20"/>
                    </Style>
                    <Style TargetType="TextBox" BasedOn="{StaticResource MahApps.Styles.TextBox}">
                        <Setter Property="FontSize" Value="20"/>
                    </Style>
                    <Style TargetType="iconPacks:PackIconMaterial">
                        <Setter Property="Height" Value="25"/>
                        <Setter Property="Width" Value="25"/>
                        <Setter Property="Margin" Value="0 0 5 0"/>
                    </Style>
                    <Style TargetType="Button" BasedOn="{StaticResource ButtonNoHover}">
                        <Setter Property="Padding" Value="10"/>
                    </Style>
                </DockPanel.Resources>
                <TextBlock Text="IP-Address" DockPanel.Dock="Top"/>
                <TextBox Text="{Binding IpAddress}" DockPanel.Dock="Top"/>
                <Button Command="{Binding ConnectClientCommand}" DockPanel.Dock="Top" Margin="0 10 0 10">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <iconPacks:PackIconMaterial Kind="Connection"/>
                            <TextBlock Text="Connect"/>
                        </StackPanel>
                    </Button.Content>
                </Button>
                <Button  Command="{Binding DisconnectClientCommand}" DockPanel.Dock="Top">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <iconPacks:PackIconMaterial Kind="LanDisconnect"/>
                            <TextBlock Text="Disconnect"/>
                        </StackPanel>
                    </Button.Content>
                </Button>
                <StackPanel Orientation="Horizontal" Margin="0 10 0 0" DockPanel.Dock="Top">
                    <TextBlock Text="Status: "/>
                    <TextBlock Text="{Binding ConnectionStatus}">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource MahApps.Styles.TextBlock}">
                                <Setter Property="FontSize" Value="20"/>
                                <Style.Triggers>
                                    <Trigger Property="TextBlock.Text" Value="Connected">
                                        <Setter Property="Foreground" Value="ForestGreen"/>
                                    </Trigger>
                                    <Trigger Property="TextBlock.Text" Value="Disconnected">
                                        <Setter Property="Foreground" Value="Red"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
                <Button DockPanel.Dock="Bottom" Command="{Binding RestartAppCommand}">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <iconPacks:PackIconMaterial Kind="Restart"/>
                            <TextBlock Text="Restart HMI"/>
                        </StackPanel>
                    </Button.Content>
                </Button>


            </DockPanel>





            <DockPanel DockPanel.Dock="Right">
                <DockPanel DockPanel.Dock="Left" LastChildFill="True" Margin="0 0 0 0" >
                    <TextBlock Text="{Binding JogSpeed, StringFormat='{}Velocity: {0}%'}" FontSize="20" DockPanel.Dock="Top"
                               Margin="0 0 0 5"/>
                    <Grid DockPanel.Dock="Top">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <Button Command="{Binding IncreaseSpeedCommand}" Margin="0 0 5 0" Height="50">
                            <Button.Content>
                                <iconPacks:PackIconMaterial Kind="Plus"/>
                            </Button.Content>
                        </Button>

                        <Button Grid.Column="1" Command="{Binding DecreaseSpeedCommand}" Margin="5 0 0 0">
                            <Button.Content>
                                <iconPacks:PackIconMaterial Kind="Minus"/>
                            </Button.Content>
                        </Button>

                    </Grid>

                    <Separator DockPanel.Dock="Top" Margin="0 10 0 10"/>


                    <StackPanel DockPanel.Dock="Top">
                        <StackPanel.Resources>
                            <Style TargetType="RadioButton" BasedOn="{StaticResource MahApps.Styles.RadioButton}">
                                <Setter Property="FontSize" Value="25"/>
                            </Style>
                            <Style TargetType="iconPacks:PackIconMaterial">
                                <Setter Property="Height" Value="25"/>
                                <Setter Property="Width" Value="25"/>
                                <Setter Property="Margin" Value="5 0 20 0"/>
                            </Style>
                        </StackPanel.Resources>

                        <RadioButton IsChecked="{Binding Path=MovementMode, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static enums:MovementMode.Joint}}">
                            <RadioButton.Content>
                                <StackPanel Orientation="Horizontal">
                                    <iconPacks:PackIconMaterial Kind="RobotIndustrial" 
                            VerticalAlignment="Stretch"
                                                                HorizontalAlignment="Stretch"/>
                                    <TextBlock Text="Joint"/>

                                </StackPanel>
                            </RadioButton.Content>
                        </RadioButton >
                        <RadioButton Margin="0 10 0 10"
                                     IsChecked="{Binding Path=MovementMode, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static enums:MovementMode.Base}}">
                            <RadioButton.Content>
                                <StackPanel Orientation="Horizontal">
                                    <iconPacks:PackIconMaterial Kind="AxisArrow" 
                            VerticalAlignment="Center"/>
                                    <TextBlock Text="Base"/>

                                </StackPanel>
                            </RadioButton.Content>
                        </RadioButton>
                        <RadioButton IsChecked="{Binding Path=MovementMode, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static enums:MovementMode.Tool}}">
                            <RadioButton.Content>
                                <StackPanel Orientation="Horizontal">
                                    <iconPacks:PackIconMaterial Kind="Wrench" 
                            VerticalAlignment="Center"/>
                                    <TextBlock Text="Tool"/>

                                </StackPanel>
                            </RadioButton.Content>
                        </RadioButton>
                    </StackPanel>

                    <Separator DockPanel.Dock="Top" Margin="0 10 0 10"/>

                    <Viewbox DockPanel.Dock="Top">
                        <StackPanel IsEnabled="{Binding UseTouchPanel}">
                            <StackPanel.Resources>
                                <Style TargetType="Button" BasedOn="{StaticResource ButtonNoHover}">
                                    <Setter Property="FontSize" Value="20"/>
                                    <Setter Property="Height" Value="70"/>
                                    <Setter Property="Padding" Value="10"/>
                                </Style>
                                <Style TargetType="iconPacks:PackIconMaterial">
                                    <Setter Property="VerticalAlignment" Value="Stretch"/>
                                </Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource MahApps.Styles.TextBlock}">
                                    <Setter Property="TextWrapping" Value="Wrap"/>
                                </Style>
                            </StackPanel.Resources>
                            <Button  Command="{Binding VacuumOnCommand}">
                                <Button.Content>
                                    <DockPanel>
                                        <iconPacks:PackIconMaterial Kind="PowerCycle"/>
                                        <TextBlock Text="Vacuum on" Margin="5 0 0 0"/>
                                    </DockPanel>
                                </Button.Content>
                            </Button>


                            <Button  Margin="0 10 0 0" Command="{Binding VacuumOffCommand}">
                                <Button.Content>
                                    <DockPanel >
                                        <iconPacks:PackIconMaterial Kind="PowerOff"/>
                                        <TextBlock Text="Vacuum off" Margin="5 0 0 0"/>
                                    </DockPanel>
                                </Button.Content>
                            </Button>

                            <Button  Margin="0 10 0 10" Command="{Binding VacuumOffWithAirburstCommand}">
                                <Button.Content>
                                    <DockPanel>
                                        <iconPacks:PackIconMaterial Kind="PowerOff"/>
                                        <iconPacks:PackIconMaterial Kind="Tailwind"/>
                                        <StackPanel Margin="5 0 0 0">
                                            <TextBlock Text="Vacuum off" />
                                            <TextBlock Text="with air burst" FontSize="14"/>
                                        </StackPanel>
                                    </DockPanel>
                                </Button.Content>
                            </Button>

                            <Separator Margin="0 10 0 10"/>

                            <Button Margin="0 10 0 0" Command="{Binding AirOnCommand}">
                                <Button.Content>
                                    <StackPanel Orientation="Horizontal">
                                        <iconPacks:PackIconMaterial Kind="PowerCycle"/>
                                        <TextBlock Text="Air on" Margin="5 0 0 0"/>
                                    </StackPanel>
                                </Button.Content>
                            </Button>

                            <Button  Margin="0 10 0 0" Command="{Binding AirOffCommand}">
                                <Button.Content>
                                    <StackPanel Orientation="Horizontal">
                                        <iconPacks:PackIconMaterial Kind="PowerOff"/>
                                        <TextBlock Text="Air off" Margin="5 0 0 0"/>
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                            <Separator Margin="0 10 0 10"></Separator>
                            <StackPanel>
                                <StackPanel.Resources>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource MahApps.Styles.TextBlock}">
                                        <Style.Triggers>
                                            <Trigger Property="Text" Value="On">
                                                <Setter Property="Foreground" Value="LawnGreen"/>
                                            </Trigger>
                                            <Trigger Property="Text" Value="Off">
                                                <Setter Property="Foreground" Value="DeepSkyBlue"/>
                                            </Trigger>
                                        </Style.Triggers>

                                    </Style>
                                </StackPanel.Resources>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Vacuum: " FontSize="20"/>
                                    <TextBlock Text="{Binding VacuumState}" FontSize="20"/>
                                </StackPanel>

                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Air: " FontSize="20"/>
                                    <TextBlock Text="{Binding AirState}" FontSize="20"/>
                                </StackPanel>
                            </StackPanel>
                        </StackPanel>
                    </Viewbox>
                </DockPanel>


                <Grid DockPanel.Dock="Right" IsEnabled="{Binding UseTouchPanel}">
                    <Grid.Resources>
                        <Style TargetType="Button" BasedOn="{StaticResource ButtonNoHover}">
                            <Setter Property="Margin" Value="5"/>
                            <Setter Property="FontSize" Value="30"/>
                        </Style>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>


                    <Button Grid.Row="1" Width="{Binding ActualHeight,RelativeSource={RelativeSource Self}}">
                        <Button.Content>
                            <TextBlock Text="{Binding JogXButtonText,StringFormat='{}{0}+'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogXPlusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                    <Button Grid.Column="1" Grid.Row="1" Width="{Binding ActualHeight,RelativeSource={RelativeSource Self}}">
                        <Button.Content>
                            <TextBlock Text="{Binding JogXButtonText,StringFormat='{}{0}-'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogXMinusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Grid.Row="2">
                        <Button.Content>
                            <TextBlock Text="{Binding JogYButtonText,StringFormat='{}{0}+'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogYPlusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                    <Button Grid.Column="1" Grid.Row="2">
                        <Button.Content>
                            <TextBlock Text="{Binding JogYButtonText,StringFormat='{}{0}-'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogYMinusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Grid.Row="3">
                        <Button.Content>
                            <TextBlock Text="{Binding JogZButtonText,StringFormat='{}{0}+'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogZPlusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                    <Button Grid.Column="1" Grid.Row="3">
                        <Button.Content>
                            <TextBlock Text="{Binding JogZButtonText,StringFormat='{}{0}-'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogZMinusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Grid.Row="4">
                        <Button.Content>
                            <TextBlock Text="{Binding JogAButtonText,StringFormat='{}{0}+'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogAPlusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                    <Button Grid.Column="1" Grid.Row="4">
                        <Button.Content>
                            <TextBlock Text="{Binding JogAButtonText,StringFormat='{}{0}-'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogAMinusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Grid.Row="5">
                        <Button.Content>
                            <TextBlock Text="{Binding JogBButtonText,StringFormat='{}{0}+'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogBPlusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                    <Button Grid.Column="1" Grid.Row="5">
                        <Button.Content>
                            <TextBlock Text="{Binding JogBButtonText,StringFormat='{}{0}-'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogBMinusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Grid.Row="6">
                        <Button.Content>
                            <TextBlock Text="{Binding JogCButtonText,StringFormat='{}{0}+'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogCPlusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                    <Button Grid.Column="1" Grid.Row="6">
                        <Button.Content>
                            <TextBlock Text="{Binding JogCButtonText,StringFormat='{}{0}-'}"/>
                        </Button.Content>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewTouchDown">
                                <i:InvokeCommandAction Command="{Binding StartJogCMinusCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTouchUp">
                                <i:InvokeCommandAction Command="{Binding StopJogCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                </Grid>

                <Separator DockPanel.Dock="Right" Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"
                           Margin="20 0 15 0"/>


            </DockPanel>

            <DockPanel DockPanel.Dock="Right" LastChildFill="False" Margin="0 0 30 0">
                <DockPanel.Resources>
                    <Style TargetType="Button" BasedOn="{StaticResource ButtonNoHover}">
                        <Setter Property="Height" Value="120"/>
                        <Setter Property="Width" Value="120"/>
                    </Style>
                    <Style TargetType="iconPacks:PackIconMaterial">
                        <Setter Property="Height" Value="25"/>
                        <Setter Property="Width" Value="25"/>
                        <Setter Property="Margin" Value="0 5 0 0"/>
                    </Style>
                </DockPanel.Resources>
                <Button FontSize="20" DockPanel.Dock="Top" x:Name="HomeButton"
                Background="{StaticResource MahApps.Brushes.Accent}"
                Command="{Binding MoveHomeCommand}">
                    <Button.Content>
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Home" x:Name="HomeTextBlock"></TextBlock>
                            <iconPacks:PackIconMaterial Kind="Home" VerticalAlignment="Center"
                                                        HorizontalAlignment="Center"
                                                Margin="0 5 0 0"/>
                        </StackPanel>
                    </Button.Content>
                </Button>

                <Button FontSize="20" DockPanel.Dock="Top" x:Name="ZeroButton"
Background="{StaticResource MahApps.Brushes.Accent}"
                        Margin="0 20 0 0"
Command="{Binding ZeroJointsCommand}">
                    <Button.Content>
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Joints = 0" x:Name="ZeroTextBlock"></TextBlock>
                            <iconPacks:PackIconMaterial Kind="Null" VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                Margin="0 5 0 0"/>
                        </StackPanel>
                    </Button.Content>
                </Button>

                <Button FontSize="20" DockPanel.Dock="Top" x:Name="StartButton"
                Margin="0 20 0 0"
Background="ForestGreen"
Command="{Binding StartProgramCommand}">
                    <Button.Content>
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Start" x:Name="StartTextBlock"></TextBlock>
                            <iconPacks:PackIconMaterial Kind="Play" VerticalAlignment="Center"
                                Margin="0 5 0 0"
                                                        HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Button.Content>
                </Button>

                <Button FontSize="20" DockPanel.Dock="Top" x:Name="StopButton"
Background="Red"
                Margin="0 20 0 0"
Command="{Binding StopProgramCommand}">
                    <Button.Content>
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Stop" x:Name="StopTextBlock"></TextBlock>
                            <iconPacks:PackIconMaterial Kind="Stop" VerticalAlignment="Center"
                                Margin="0 5 0 0"
                                                        HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Button.Content>
                </Button>

                <Button FontSize="20" DockPanel.Dock="Top" x:Name="SelectProgramButton"
Background="{StaticResource MahApps.Brushes.Accent}"
                Margin="0 20 0 0"
Command="{Binding ChangeProgramCommand}">
                    <Button.Content>
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Change program" x:Name="SelectProgramTextBlock" 
                                       TextWrapping="Wrap" TextAlignment="Center"></TextBlock>
                            <iconPacks:PackIconMaterial Kind="SwapHorizontal" VerticalAlignment="Center"
                                Margin="0 5 0 0"
                                                        HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Button.Content>
                </Button>

            </DockPanel>

            <GroupBox Header="Status" Margin="30 0 30 0" Padding="10">

                <GroupBox.Resources>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource MahApps.Styles.TextBlock}">
                        <Setter Property="FontSize" Value="20"/>
                    </Style>
                    <Style TargetType="iconPacks:PackIconMaterial">
                        <Setter Property="Height" Value="30"/>
                        <Setter Property="Width" Value="30"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                    <Style TargetType="CheckBox" BasedOn="{StaticResource MahApps.Styles.CheckBox}">
                        <Setter Property="FontSize" Value="20"/>
                    </Style>
                </GroupBox.Resources>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Row="0"
                                       Grid.Column="0"
                                       Text="Messagecount:"/>
                            <TextBlock Grid.Row="0"
                                       Grid.Column="1"
                                       Text="{Binding CntString}"/>

                            <TextBlock Grid.Row="1" Grid.Column="0" Text="Emergency-Stop:"/>
                            <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding EStopString}"
                                       Margin="5 0 0 0"/>

                            <TextBlock Grid.Row="2" Grid.Column="0" Text="Error:" Margin="0 10 0 10"/>
                            <TextBlock Grid.Row="2" Grid.Column="1" Text="{Binding ErrorStatusString}" Grid.ColumnSpan="1"
                                       Margin="5 10 0 10">
                                <TextBlock.Resources>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource MahApps.Styles.TextBlock}">
                                        <Setter Property="FontSize" Value="20"/>
                                        <Setter Property="FontWeight" Value="Bold"/>
                                        <Setter Property="Foreground" Value="Red"/>
                                        <Style.Triggers>
                                            <Trigger Property="Text" Value="NoError">
                                                <Setter Property="Foreground" Value="LawnGreen"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Resources>
                            </TextBlock>

                            <TextBlock Grid.Row="3" Grid.Column="0" Text="123:"/>
                            <TextBlock Grid.Row="3" Grid.Column="1" Text="{Binding Error123String}" Margin="5 0 0 0"/>

                            <TextBlock Grid.Row="4" Grid.Column="0" Text="456:"/>
                            <TextBlock Grid.Row="4" Grid.Column="1" Text="{Binding Error456String}" Margin="5 0 0 0"/>

                            <TextBlock Grid.Row="5" Grid.Column="0" Text="789:"/>
                            <TextBlock Grid.Row="5" Grid.Column="1" Text="{Binding Error789String}" Margin="5 0 0 0"/>

                        </Grid>

                        <StackPanel Grid.Column="1">
                            <StackPanel.Resources>
                                <Style TargetType="CheckBox" BasedOn="{StaticResource MahApps.Styles.CheckBox}">
                                    <Setter Property="Margin" Value="0 0 0 10"/>
                                </Style>
                            </StackPanel.Resources>
                            <CheckBox Content="Hide alive messages" IsChecked="{Binding HideAliveMessages}" FontSize="20"/>
                            <CheckBox Content="Hide basic status messages" IsChecked="{Binding HideBasicStatusMessages}" FontSize="20"/>
                            <CheckBox Content="Hide platform status messages" IsChecked="{Binding HidePlatformStatusMessages}" FontSize="20"/>
                            <CheckBox Content="Hide further status messages" IsChecked="{Binding HideFurtherStatusMessages}" FontSize="20"/>
                            <CheckBox Content="Hide unknown messages" IsChecked="{Binding HideUnknownMessages}" FontSize="20"/>
                        </StackPanel>

                    </Grid>

                    <Grid Grid.Row="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition></RowDefinition>
                            <RowDefinition></RowDefinition>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <Separator Margin="0 10 0 10" Grid.ColumnSpan="3"/>

                        <StackPanel Grid.Row="1">
                            <TextBlock Text="Position Joints:"/>
                            <TextBlock Text="{Binding JointsPositionString}"/>
                        </StackPanel>

                        <StackPanel Grid.Row="1" Grid.Column="1">
                            <TextBlock Text="Joints Current:"/>
                            <TextBlock Text="{Binding JointsCurrentString}"/>
                        </StackPanel>

                        <StackPanel Grid.Row="1" Grid.Column="2">
                            <TextBlock Text="Position Cartesian:"/>
                            <TextBlock Text="{Binding CartPositionString}"/>
                        </StackPanel>

                        <StackPanel Grid.Row="2">
                            <TextBlock Text="Loaded program:"/>
                            <TextBlock Text="{Binding CurrentProgram}"/>
                        </StackPanel>

                        <CheckBox Grid.Row="2" Grid.Column="2" Content="Loop program" VerticalAlignment="Center" VerticalContentAlignment="Center"
                                  IsChecked="{Binding LoopProgram}"/>

                    </Grid>

                    <Grid Grid.Row="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <Separator Grid.ColumnSpan="3" Margin="0 10 0 10"/>

                        <Button Margin="0 0 10 10" Grid.Row="1" Command="{Binding ResetCommand}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal">
                                    <iconPacks:PackIconMaterial Kind="Restart"/>
                                    <TextBlock Text="Reset" Margin="5 0 0 0"/>
                                </StackPanel>
                            </Button.Content>
                        </Button>

                        <Button Grid.Row="2" Margin="0 10 10 0"
                                Command="{Binding EnableCommand}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal">
                                    <iconPacks:PackIconMaterial Kind="Power"/>
                                    <TextBlock Text="Enable" Margin="5 0 0 0"/>
                                </StackPanel>
                            </Button.Content>
                        </Button>

                        <Separator Grid.Column="1" Grid.RowSpan="3" Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"
                                   Margin="0 10 0 0"/>

                        <Button Grid.Column="2" Grid.Row="1" Margin="10 0 0 10" Command="{Binding EnableGamepadCommand}"
                                Visibility="{Binding UseTouchPanel,Converter={StaticResource BoolVisconv}}">
                                <Button.Content>
                                    <StackPanel Orientation="Horizontal">
                                        <iconPacks:PackIconMaterial Kind="GoogleController" 
                                                                    Margin="0 0 5 0"></iconPacks:PackIconMaterial>
                                    <TextBlock Text="Enable gamepad">
                                        
                                    </TextBlock>
                                </StackPanel>
                                </Button.Content>
                            </Button>

                        <Button Grid.Column="2" Grid.Row="1" Margin="10 0 0 10" Command="{Binding DisableGamepadCommand}"
                                Visibility="{Binding UseTouchPanel,Converter={StaticResource BoolVisconv},ConverterParameter='Invert'}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal">
                                    <iconPacks:PackIconMaterial Kind="GoogleControllerOff" 
                                            Margin="0 0 5 0"></iconPacks:PackIconMaterial>
                                    <TextBlock Text="Disable gamepad">
                                        
                                    </TextBlock>
                                </StackPanel>
                            </Button.Content>
                        </Button>


                        <DockPanel Grid.Row="2" Grid.Column="2" Margin="10 10 0 0" LastChildFill="False">
                            <CheckBox Content="Set vacuum to toggle" DockPanel.Dock="Top" IsChecked="{Binding ToggleVacuumGamepad}"/>
                            <CheckBox Content="Switch X and Y axis" DockPanel.Dock="Top" Margin="0 5 0 0" IsChecked="{Binding GamepadSwitchAxis}"/>
                            <Separator DockPanel.Dock="Top" Margin="0 10 0 10"/>
                            <CheckBox Content="Invert X axis" DockPanel.Dock="Top" IsChecked="{Binding GamepadInvertX}"/>
                            <CheckBox Content="Invert Y axis" DockPanel.Dock="Top" Margin="0 5 0 0" IsChecked="{Binding GamepadInvertY}"/>
                        </DockPanel>

                    </Grid>

                </Grid>
            </GroupBox>

        </DockPanel>


        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="200"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <Separator Grid.ColumnSpan="2" Margin="0 10 0 10"/>

            <ContentControl Content="{Binding Source={x:Static helpers:LoggingHelper.LogTextBox}}"
                        Margin="0 0 20 0"
                            Grid.Row="1"/>

            <Grid Grid.Column="1" Grid.Row="1">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="90"/>
                </Grid.RowDefinitions>
                <Image Source="{svgc:SvgImage Source=Resources/Images/Swarovski_Logo.svg, AppName=IgusSwarovskiHmi}"
                       Grid.Row="1"
                       Margin="0 0 10 0"/>

                <Image Source="pack://application:,,,/Resources/Images/mimm-logo.png"
                      Margin="0 0 10 0" />

            </Grid>

        </Grid>

        <ContentPresenter Content="{Binding SelectProgramViewModel}" Width="500" Margin="0 100 0 10"/>

    </Grid>
</UserControl>
